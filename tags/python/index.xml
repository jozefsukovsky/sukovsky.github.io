<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jozef Sukovsky</title>
    <link>https://sukovsky.com/tags/python/</link>
    <description>Recent content in Python on Jozef Sukovsky</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Â© Jozef Sukovsky</copyright>
    <lastBuildDate>Thu, 09 May 2024 19:00:00 +0000</lastBuildDate>
    <atom:link href="https://sukovsky.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python JSON de/serialization speed-up and its impact on Django performance</title>
      <link>https://sukovsky.com/posts/6-python-json-serializers-performance/</link>
      <pubDate>Thu, 09 May 2024 19:00:00 +0000</pubDate>
      <guid>https://sukovsky.com/posts/6-python-json-serializers-performance/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;This is a non-direct follow-up to &lt;a href=&#34;https://sukovsky.com/posts/5-stress-testing-django-drf-fastapi-expressjs-go-chi-axum/&#34; title=&#34;article&#34;&gt;Stress-testing Django, Django REST framework, FastAPI, Express.js, Go-chi and Axum&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The question we will answer is, how much can we squeeze from Django replacing the native json library. For most cases, standard json library does good enough. But sometimes, when we deal with huge payloads, it may be beneficial to do differently. In this article, we shall compare &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;simplejson&lt;/code&gt;, &lt;code&gt;orjson&lt;/code&gt;, &lt;code&gt;python-rapidjson&lt;/code&gt;, &lt;code&gt;ultrajson&lt;/code&gt;. Overall, there were some more, like &lt;code&gt;hyperjson&lt;/code&gt;, &lt;code&gt;perde&lt;/code&gt;, but such were already abandoned, or &lt;code&gt;pyserde&lt;/code&gt; which I decided not to test because of a different usage pattern and the performance for this purpose wasn&amp;rsquo;t impressive. Once we find the winner, we will replace the JsonResponse from the test setup from previous article and re-run the brute force load test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django user trying out FastAPI</title>
      <link>https://sukovsky.com/posts/4-django-user-trying-out-fastapi/</link>
      <pubDate>Thu, 27 May 2021 20:20:00 +0000</pubDate>
      <guid>https://sukovsky.com/posts/4-django-user-trying-out-fastapi/</guid>
      <description>&lt;p&gt;Django was my first choice for many years. But building new API-driven products using Django and Django REST Framework never brought that pleasing feeling I would like to feel.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-good-the-bad-and-the-ugly&#34;&gt;The Good, the Bad and the Ugly&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s been around 2007 I stumbled upon &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;Django framework&lt;/a&gt;. Needed to build a very simple image gallery, nothing serious. And since then, every time I had to do something to be displayed on the web, Django was my first choice. What was a big deal for me was it&amp;rsquo;s ORM, &lt;code&gt;contrib.auth&lt;/code&gt; and &lt;code&gt;contrib.admin&lt;/code&gt;. Going up with and running in minutes, having some database models done really fast and being able to fill the tables with some test data right away was always a pleasing experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Python Imports</title>
      <link>https://sukovsky.com/posts/2-about-python-imports/</link>
      <pubDate>Tue, 01 Sep 2020 14:00:00 +0000</pubDate>
      <guid>https://sukovsky.com/posts/2-about-python-imports/</guid>
      <description>&lt;p&gt;Seeing some code snippets, sometimes hurts. Sometimes it hurts even more, realizing I&amp;rsquo;m the author. But very often, it hurts right in the beginning of the file. The imports.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-this-should-be-according-to-the-theory&#34;&gt;How this should be according to the theory&lt;/h2&gt;&#xA;&lt;p&gt;Every other code editor or IDE has at least some possibility of linting. That&amp;rsquo;s the feature which will bother you to fix some stuff while writing your code. Even though, many people just consider it some game, where sustaining these suggestions is the goal of it. Only it isn&amp;rsquo;t.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
